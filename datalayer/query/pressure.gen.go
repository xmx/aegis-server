// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xmx/aegis-server/datalayer/model"
)

func newPressure(db *gorm.DB, opts ...gen.DOOption) pressure {
	_pressure := pressure{}

	_pressure.pressureDo.UseDB(db, opts...)
	_pressure.pressureDo.UseModel(&model.Pressure{})

	tableName := _pressure.pressureDo.TableName()
	_pressure.ALL = field.NewAsterisk(tableName)
	_pressure.ID = field.NewInt(tableName, "id")
	_pressure.PID = field.NewInt(tableName, "pid")
	_pressure.CreatedAt = field.NewTime(tableName, "created_at")
	_pressure.UpdatedAt = field.NewTime(tableName, "updated_at")

	_pressure.fillFieldMap()

	return _pressure
}

type pressure struct {
	pressureDo pressureDo

	ALL       field.Asterisk
	ID        field.Int
	PID       field.Int
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (p pressure) Table(newTableName string) *pressure {
	p.pressureDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pressure) As(alias string) *pressure {
	p.pressureDo.DO = *(p.pressureDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pressure) updateTableName(table string) *pressure {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt(table, "id")
	p.PID = field.NewInt(table, "pid")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *pressure) WithContext(ctx context.Context) *pressureDo { return p.pressureDo.WithContext(ctx) }

func (p pressure) TableName() string { return p.pressureDo.TableName() }

func (p pressure) Alias() string { return p.pressureDo.Alias() }

func (p pressure) Columns(cols ...field.Expr) gen.Columns { return p.pressureDo.Columns(cols...) }

func (p *pressure) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pressure) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id"] = p.ID
	p.fieldMap["pid"] = p.PID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p pressure) clone(db *gorm.DB) pressure {
	p.pressureDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pressure) replaceDB(db *gorm.DB) pressure {
	p.pressureDo.ReplaceDB(db)
	return p
}

type pressureDo struct{ gen.DO }

func (p pressureDo) Debug() *pressureDo {
	return p.withDO(p.DO.Debug())
}

func (p pressureDo) WithContext(ctx context.Context) *pressureDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pressureDo) ReadDB() *pressureDo {
	return p.Clauses(dbresolver.Read)
}

func (p pressureDo) WriteDB() *pressureDo {
	return p.Clauses(dbresolver.Write)
}

func (p pressureDo) Session(config *gorm.Session) *pressureDo {
	return p.withDO(p.DO.Session(config))
}

func (p pressureDo) Clauses(conds ...clause.Expression) *pressureDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pressureDo) Returning(value interface{}, columns ...string) *pressureDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pressureDo) Not(conds ...gen.Condition) *pressureDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pressureDo) Or(conds ...gen.Condition) *pressureDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pressureDo) Select(conds ...field.Expr) *pressureDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pressureDo) Where(conds ...gen.Condition) *pressureDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pressureDo) Order(conds ...field.Expr) *pressureDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pressureDo) Distinct(cols ...field.Expr) *pressureDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pressureDo) Omit(cols ...field.Expr) *pressureDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pressureDo) Join(table schema.Tabler, on ...field.Expr) *pressureDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pressureDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pressureDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pressureDo) RightJoin(table schema.Tabler, on ...field.Expr) *pressureDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pressureDo) Group(cols ...field.Expr) *pressureDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pressureDo) Having(conds ...gen.Condition) *pressureDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pressureDo) Limit(limit int) *pressureDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pressureDo) Offset(offset int) *pressureDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pressureDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pressureDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pressureDo) Unscoped() *pressureDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pressureDo) Create(values ...*model.Pressure) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pressureDo) CreateInBatches(values []*model.Pressure, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pressureDo) Save(values ...*model.Pressure) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pressureDo) First() (*model.Pressure, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pressure), nil
	}
}

func (p pressureDo) Take() (*model.Pressure, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pressure), nil
	}
}

func (p pressureDo) Last() (*model.Pressure, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pressure), nil
	}
}

func (p pressureDo) Find() ([]*model.Pressure, error) {
	result, err := p.DO.Find()
	return result.([]*model.Pressure), err
}

func (p pressureDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Pressure, err error) {
	buf := make([]*model.Pressure, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pressureDo) FindInBatches(result *[]*model.Pressure, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pressureDo) Attrs(attrs ...field.AssignExpr) *pressureDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pressureDo) Assign(attrs ...field.AssignExpr) *pressureDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pressureDo) Joins(fields ...field.RelationField) *pressureDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pressureDo) Preload(fields ...field.RelationField) *pressureDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pressureDo) FirstOrInit() (*model.Pressure, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pressure), nil
	}
}

func (p pressureDo) FirstOrCreate() (*model.Pressure, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pressure), nil
	}
}

func (p pressureDo) FindByPage(offset int, limit int) (result []*model.Pressure, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pressureDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pressureDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pressureDo) Delete(models ...*model.Pressure) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pressureDo) withDO(do gen.Dao) *pressureDo {
	p.DO = *do.(*gen.DO)
	return p
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xmx/aegis-server/datalayer/model"
)

func newConfigCertificate(db *gorm.DB, opts ...gen.DOOption) configCertificate {
	_configCertificate := configCertificate{}

	_configCertificate.configCertificateDo.UseDB(db, opts...)
	_configCertificate.configCertificateDo.UseModel(&model.ConfigCertificate{})

	tableName := _configCertificate.configCertificateDo.TableName()
	_configCertificate.ALL = field.NewAsterisk(tableName)
	_configCertificate.ID = field.NewInt64(tableName, "id")
	_configCertificate.Enabled = field.NewBool(tableName, "enabled")
	_configCertificate.CommonName = field.NewString(tableName, "common_name")
	_configCertificate.PublicKey = field.NewBytes(tableName, "public_key")
	_configCertificate.PrivateKey = field.NewBytes(tableName, "private_key")
	_configCertificate.CertificateSHA256 = field.NewString(tableName, "certificate_sha256")
	_configCertificate.PublicKeySHA256 = field.NewString(tableName, "public_key_sha256")
	_configCertificate.PrivateKeySHA256 = field.NewString(tableName, "private_key_sha256")
	_configCertificate.Organization = field.NewField(tableName, "organization")
	_configCertificate.Country = field.NewField(tableName, "country")
	_configCertificate.Province = field.NewField(tableName, "province")
	_configCertificate.Locality = field.NewField(tableName, "locality")
	_configCertificate.DNSNames = field.NewField(tableName, "dns_names")
	_configCertificate.IPAddresses = field.NewField(tableName, "ip_addresses")
	_configCertificate.Version = field.NewInt(tableName, "version")
	_configCertificate.NotBefore = field.NewTime(tableName, "not_before")
	_configCertificate.NotAfter = field.NewTime(tableName, "not_after")
	_configCertificate.UpdatedAt = field.NewTime(tableName, "updated_at")
	_configCertificate.CreatedAt = field.NewTime(tableName, "created_at")

	_configCertificate.fillFieldMap()

	return _configCertificate
}

type configCertificate struct {
	configCertificateDo configCertificateDo

	ALL               field.Asterisk
	ID                field.Int64
	Enabled           field.Bool
	CommonName        field.String
	PublicKey         field.Bytes
	PrivateKey        field.Bytes
	CertificateSHA256 field.String
	PublicKeySHA256   field.String
	PrivateKeySHA256  field.String
	Organization      field.Field
	Country           field.Field
	Province          field.Field
	Locality          field.Field
	DNSNames          field.Field
	IPAddresses       field.Field
	Version           field.Int
	NotBefore         field.Time
	NotAfter          field.Time
	UpdatedAt         field.Time
	CreatedAt         field.Time

	fieldMap map[string]field.Expr
}

func (c configCertificate) Table(newTableName string) *configCertificate {
	c.configCertificateDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c configCertificate) As(alias string) *configCertificate {
	c.configCertificateDo.DO = *(c.configCertificateDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *configCertificate) updateTableName(table string) *configCertificate {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Enabled = field.NewBool(table, "enabled")
	c.CommonName = field.NewString(table, "common_name")
	c.PublicKey = field.NewBytes(table, "public_key")
	c.PrivateKey = field.NewBytes(table, "private_key")
	c.CertificateSHA256 = field.NewString(table, "certificate_sha256")
	c.PublicKeySHA256 = field.NewString(table, "public_key_sha256")
	c.PrivateKeySHA256 = field.NewString(table, "private_key_sha256")
	c.Organization = field.NewField(table, "organization")
	c.Country = field.NewField(table, "country")
	c.Province = field.NewField(table, "province")
	c.Locality = field.NewField(table, "locality")
	c.DNSNames = field.NewField(table, "dns_names")
	c.IPAddresses = field.NewField(table, "ip_addresses")
	c.Version = field.NewInt(table, "version")
	c.NotBefore = field.NewTime(table, "not_before")
	c.NotAfter = field.NewTime(table, "not_after")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.CreatedAt = field.NewTime(table, "created_at")

	c.fillFieldMap()

	return c
}

func (c *configCertificate) WithContext(ctx context.Context) *configCertificateDo {
	return c.configCertificateDo.WithContext(ctx)
}

func (c configCertificate) TableName() string { return c.configCertificateDo.TableName() }

func (c configCertificate) Alias() string { return c.configCertificateDo.Alias() }

func (c configCertificate) Columns(cols ...field.Expr) gen.Columns {
	return c.configCertificateDo.Columns(cols...)
}

func (c *configCertificate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *configCertificate) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 19)
	c.fieldMap["id"] = c.ID
	c.fieldMap["enabled"] = c.Enabled
	c.fieldMap["common_name"] = c.CommonName
	c.fieldMap["public_key"] = c.PublicKey
	c.fieldMap["private_key"] = c.PrivateKey
	c.fieldMap["certificate_sha256"] = c.CertificateSHA256
	c.fieldMap["public_key_sha256"] = c.PublicKeySHA256
	c.fieldMap["private_key_sha256"] = c.PrivateKeySHA256
	c.fieldMap["organization"] = c.Organization
	c.fieldMap["country"] = c.Country
	c.fieldMap["province"] = c.Province
	c.fieldMap["locality"] = c.Locality
	c.fieldMap["dns_names"] = c.DNSNames
	c.fieldMap["ip_addresses"] = c.IPAddresses
	c.fieldMap["version"] = c.Version
	c.fieldMap["not_before"] = c.NotBefore
	c.fieldMap["not_after"] = c.NotAfter
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["created_at"] = c.CreatedAt
}

func (c configCertificate) clone(db *gorm.DB) configCertificate {
	c.configCertificateDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c configCertificate) replaceDB(db *gorm.DB) configCertificate {
	c.configCertificateDo.ReplaceDB(db)
	return c
}

type configCertificateDo struct{ gen.DO }

func (c configCertificateDo) Debug() *configCertificateDo {
	return c.withDO(c.DO.Debug())
}

func (c configCertificateDo) WithContext(ctx context.Context) *configCertificateDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c configCertificateDo) ReadDB() *configCertificateDo {
	return c.Clauses(dbresolver.Read)
}

func (c configCertificateDo) WriteDB() *configCertificateDo {
	return c.Clauses(dbresolver.Write)
}

func (c configCertificateDo) Session(config *gorm.Session) *configCertificateDo {
	return c.withDO(c.DO.Session(config))
}

func (c configCertificateDo) Clauses(conds ...clause.Expression) *configCertificateDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c configCertificateDo) Returning(value interface{}, columns ...string) *configCertificateDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c configCertificateDo) Not(conds ...gen.Condition) *configCertificateDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c configCertificateDo) Or(conds ...gen.Condition) *configCertificateDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c configCertificateDo) Select(conds ...field.Expr) *configCertificateDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c configCertificateDo) Where(conds ...gen.Condition) *configCertificateDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c configCertificateDo) Order(conds ...field.Expr) *configCertificateDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c configCertificateDo) Distinct(cols ...field.Expr) *configCertificateDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c configCertificateDo) Omit(cols ...field.Expr) *configCertificateDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c configCertificateDo) Join(table schema.Tabler, on ...field.Expr) *configCertificateDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c configCertificateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *configCertificateDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c configCertificateDo) RightJoin(table schema.Tabler, on ...field.Expr) *configCertificateDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c configCertificateDo) Group(cols ...field.Expr) *configCertificateDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c configCertificateDo) Having(conds ...gen.Condition) *configCertificateDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c configCertificateDo) Limit(limit int) *configCertificateDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c configCertificateDo) Offset(offset int) *configCertificateDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c configCertificateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *configCertificateDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c configCertificateDo) Unscoped() *configCertificateDo {
	return c.withDO(c.DO.Unscoped())
}

func (c configCertificateDo) Create(values ...*model.ConfigCertificate) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c configCertificateDo) CreateInBatches(values []*model.ConfigCertificate, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c configCertificateDo) Save(values ...*model.ConfigCertificate) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c configCertificateDo) First() (*model.ConfigCertificate, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigCertificate), nil
	}
}

func (c configCertificateDo) Take() (*model.ConfigCertificate, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigCertificate), nil
	}
}

func (c configCertificateDo) Last() (*model.ConfigCertificate, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigCertificate), nil
	}
}

func (c configCertificateDo) Find() ([]*model.ConfigCertificate, error) {
	result, err := c.DO.Find()
	return result.([]*model.ConfigCertificate), err
}

func (c configCertificateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConfigCertificate, err error) {
	buf := make([]*model.ConfigCertificate, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c configCertificateDo) FindInBatches(result *[]*model.ConfigCertificate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c configCertificateDo) Attrs(attrs ...field.AssignExpr) *configCertificateDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c configCertificateDo) Assign(attrs ...field.AssignExpr) *configCertificateDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c configCertificateDo) Joins(fields ...field.RelationField) *configCertificateDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c configCertificateDo) Preload(fields ...field.RelationField) *configCertificateDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c configCertificateDo) FirstOrInit() (*model.ConfigCertificate, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigCertificate), nil
	}
}

func (c configCertificateDo) FirstOrCreate() (*model.ConfigCertificate, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigCertificate), nil
	}
}

func (c configCertificateDo) FindByPage(offset int, limit int) (result []*model.ConfigCertificate, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c configCertificateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c configCertificateDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c configCertificateDo) Delete(models ...*model.ConfigCertificate) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *configCertificateDo) withDO(do gen.Dao) *configCertificateDo {
	c.DO = *do.(*gen.DO)
	return c
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xmx/aegis-server/datalayer/model"
)

func newOplog(db *gorm.DB, opts ...gen.DOOption) oplog {
	_oplog := oplog{}

	_oplog.oplogDo.UseDB(db, opts...)
	_oplog.oplogDo.UseModel(&model.Oplog{})

	tableName := _oplog.oplogDo.TableName()
	_oplog.ALL = field.NewAsterisk(tableName)
	_oplog.ID = field.NewInt64(tableName, "id")
	_oplog.Name = field.NewString(tableName, "name")
	_oplog.Host = field.NewString(tableName, "host")
	_oplog.Method = field.NewString(tableName, "method")
	_oplog.Path = field.NewString(tableName, "path")
	_oplog.Query = field.NewField(tableName, "query")
	_oplog.Body = field.NewBytes(tableName, "body")
	_oplog.Header = field.NewField(tableName, "header")
	_oplog.ClientIP = field.NewString(tableName, "client_ip")
	_oplog.DirectIP = field.NewString(tableName, "direct_ip")
	_oplog.Succeed = field.NewBool(tableName, "succeed")
	_oplog.Reason = field.NewString(tableName, "reason")
	_oplog.AccessedAt = field.NewTime(tableName, "accessed_at")
	_oplog.FinishedAt = field.NewTime(tableName, "finished_at")

	_oplog.fillFieldMap()

	return _oplog
}

type oplog struct {
	oplogDo oplogDo

	ALL        field.Asterisk
	ID         field.Int64
	Name       field.String
	Host       field.String
	Method     field.String
	Path       field.String
	Query      field.Field
	Body       field.Bytes
	Header     field.Field
	ClientIP   field.String
	DirectIP   field.String
	Succeed    field.Bool
	Reason     field.String
	AccessedAt field.Time
	FinishedAt field.Time

	fieldMap map[string]field.Expr
}

func (o oplog) Table(newTableName string) *oplog {
	o.oplogDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oplog) As(alias string) *oplog {
	o.oplogDo.DO = *(o.oplogDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oplog) updateTableName(table string) *oplog {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.Name = field.NewString(table, "name")
	o.Host = field.NewString(table, "host")
	o.Method = field.NewString(table, "method")
	o.Path = field.NewString(table, "path")
	o.Query = field.NewField(table, "query")
	o.Body = field.NewBytes(table, "body")
	o.Header = field.NewField(table, "header")
	o.ClientIP = field.NewString(table, "client_ip")
	o.DirectIP = field.NewString(table, "direct_ip")
	o.Succeed = field.NewBool(table, "succeed")
	o.Reason = field.NewString(table, "reason")
	o.AccessedAt = field.NewTime(table, "accessed_at")
	o.FinishedAt = field.NewTime(table, "finished_at")

	o.fillFieldMap()

	return o
}

func (o *oplog) WithContext(ctx context.Context) *oplogDo { return o.oplogDo.WithContext(ctx) }

func (o oplog) TableName() string { return o.oplogDo.TableName() }

func (o oplog) Alias() string { return o.oplogDo.Alias() }

func (o oplog) Columns(cols ...field.Expr) gen.Columns { return o.oplogDo.Columns(cols...) }

func (o *oplog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oplog) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 14)
	o.fieldMap["id"] = o.ID
	o.fieldMap["name"] = o.Name
	o.fieldMap["host"] = o.Host
	o.fieldMap["method"] = o.Method
	o.fieldMap["path"] = o.Path
	o.fieldMap["query"] = o.Query
	o.fieldMap["body"] = o.Body
	o.fieldMap["header"] = o.Header
	o.fieldMap["client_ip"] = o.ClientIP
	o.fieldMap["direct_ip"] = o.DirectIP
	o.fieldMap["succeed"] = o.Succeed
	o.fieldMap["reason"] = o.Reason
	o.fieldMap["accessed_at"] = o.AccessedAt
	o.fieldMap["finished_at"] = o.FinishedAt
}

func (o oplog) clone(db *gorm.DB) oplog {
	o.oplogDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oplog) replaceDB(db *gorm.DB) oplog {
	o.oplogDo.ReplaceDB(db)
	return o
}

type oplogDo struct{ gen.DO }

func (o oplogDo) Debug() *oplogDo {
	return o.withDO(o.DO.Debug())
}

func (o oplogDo) WithContext(ctx context.Context) *oplogDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oplogDo) ReadDB() *oplogDo {
	return o.Clauses(dbresolver.Read)
}

func (o oplogDo) WriteDB() *oplogDo {
	return o.Clauses(dbresolver.Write)
}

func (o oplogDo) Session(config *gorm.Session) *oplogDo {
	return o.withDO(o.DO.Session(config))
}

func (o oplogDo) Clauses(conds ...clause.Expression) *oplogDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oplogDo) Returning(value interface{}, columns ...string) *oplogDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oplogDo) Not(conds ...gen.Condition) *oplogDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oplogDo) Or(conds ...gen.Condition) *oplogDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oplogDo) Select(conds ...field.Expr) *oplogDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oplogDo) Where(conds ...gen.Condition) *oplogDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oplogDo) Order(conds ...field.Expr) *oplogDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oplogDo) Distinct(cols ...field.Expr) *oplogDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oplogDo) Omit(cols ...field.Expr) *oplogDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oplogDo) Join(table schema.Tabler, on ...field.Expr) *oplogDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oplogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *oplogDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oplogDo) RightJoin(table schema.Tabler, on ...field.Expr) *oplogDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oplogDo) Group(cols ...field.Expr) *oplogDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oplogDo) Having(conds ...gen.Condition) *oplogDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oplogDo) Limit(limit int) *oplogDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oplogDo) Offset(offset int) *oplogDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oplogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *oplogDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oplogDo) Unscoped() *oplogDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oplogDo) Create(values ...*model.Oplog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oplogDo) CreateInBatches(values []*model.Oplog, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oplogDo) Save(values ...*model.Oplog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oplogDo) First() (*model.Oplog, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oplog), nil
	}
}

func (o oplogDo) Take() (*model.Oplog, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oplog), nil
	}
}

func (o oplogDo) Last() (*model.Oplog, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oplog), nil
	}
}

func (o oplogDo) Find() ([]*model.Oplog, error) {
	result, err := o.DO.Find()
	return result.([]*model.Oplog), err
}

func (o oplogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Oplog, err error) {
	buf := make([]*model.Oplog, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oplogDo) FindInBatches(result *[]*model.Oplog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oplogDo) Attrs(attrs ...field.AssignExpr) *oplogDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oplogDo) Assign(attrs ...field.AssignExpr) *oplogDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oplogDo) Joins(fields ...field.RelationField) *oplogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oplogDo) Preload(fields ...field.RelationField) *oplogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oplogDo) FirstOrInit() (*model.Oplog, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oplog), nil
	}
}

func (o oplogDo) FirstOrCreate() (*model.Oplog, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oplog), nil
	}
}

func (o oplogDo) FindByPage(offset int, limit int) (result []*model.Oplog, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oplogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oplogDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oplogDo) Delete(models ...*model.Oplog) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oplogDo) withDO(do gen.Dao) *oplogDo {
	o.DO = *do.(*gen.DO)
	return o
}

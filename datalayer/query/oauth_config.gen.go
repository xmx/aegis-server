// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xmx/aegis-server/datalayer/model"
)

func newOAuthConfig(db *gorm.DB, opts ...gen.DOOption) oAuthConfig {
	_oAuthConfig := oAuthConfig{}

	_oAuthConfig.oAuthConfigDo.UseDB(db, opts...)
	_oAuthConfig.oAuthConfigDo.UseModel(&model.OAuthConfig{})

	tableName := _oAuthConfig.oAuthConfigDo.TableName()
	_oAuthConfig.ALL = field.NewAsterisk(tableName)
	_oAuthConfig.ID = field.NewInt64(tableName, "id")
	_oAuthConfig.Name = field.NewString(tableName, "name")
	_oAuthConfig.Endpoint = field.NewString(tableName, "endpoint")
	_oAuthConfig.ClientID = field.NewString(tableName, "client_id")
	_oAuthConfig.ClientSecret = field.NewString(tableName, "client_secret")
	_oAuthConfig.RedirectURI = field.NewString(tableName, "redirect_uri")

	_oAuthConfig.fillFieldMap()

	return _oAuthConfig
}

type oAuthConfig struct {
	oAuthConfigDo oAuthConfigDo

	ALL          field.Asterisk
	ID           field.Int64
	Name         field.String
	Endpoint     field.String
	ClientID     field.String
	ClientSecret field.String
	RedirectURI  field.String

	fieldMap map[string]field.Expr
}

func (o oAuthConfig) Table(newTableName string) *oAuthConfig {
	o.oAuthConfigDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oAuthConfig) As(alias string) *oAuthConfig {
	o.oAuthConfigDo.DO = *(o.oAuthConfigDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oAuthConfig) updateTableName(table string) *oAuthConfig {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.Name = field.NewString(table, "name")
	o.Endpoint = field.NewString(table, "endpoint")
	o.ClientID = field.NewString(table, "client_id")
	o.ClientSecret = field.NewString(table, "client_secret")
	o.RedirectURI = field.NewString(table, "redirect_uri")

	o.fillFieldMap()

	return o
}

func (o *oAuthConfig) WithContext(ctx context.Context) *oAuthConfigDo {
	return o.oAuthConfigDo.WithContext(ctx)
}

func (o oAuthConfig) TableName() string { return o.oAuthConfigDo.TableName() }

func (o oAuthConfig) Alias() string { return o.oAuthConfigDo.Alias() }

func (o oAuthConfig) Columns(cols ...field.Expr) gen.Columns { return o.oAuthConfigDo.Columns(cols...) }

func (o *oAuthConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oAuthConfig) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 6)
	o.fieldMap["id"] = o.ID
	o.fieldMap["name"] = o.Name
	o.fieldMap["endpoint"] = o.Endpoint
	o.fieldMap["client_id"] = o.ClientID
	o.fieldMap["client_secret"] = o.ClientSecret
	o.fieldMap["redirect_uri"] = o.RedirectURI
}

func (o oAuthConfig) clone(db *gorm.DB) oAuthConfig {
	o.oAuthConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oAuthConfig) replaceDB(db *gorm.DB) oAuthConfig {
	o.oAuthConfigDo.ReplaceDB(db)
	return o
}

type oAuthConfigDo struct{ gen.DO }

func (o oAuthConfigDo) Debug() *oAuthConfigDo {
	return o.withDO(o.DO.Debug())
}

func (o oAuthConfigDo) WithContext(ctx context.Context) *oAuthConfigDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oAuthConfigDo) ReadDB() *oAuthConfigDo {
	return o.Clauses(dbresolver.Read)
}

func (o oAuthConfigDo) WriteDB() *oAuthConfigDo {
	return o.Clauses(dbresolver.Write)
}

func (o oAuthConfigDo) Session(config *gorm.Session) *oAuthConfigDo {
	return o.withDO(o.DO.Session(config))
}

func (o oAuthConfigDo) Clauses(conds ...clause.Expression) *oAuthConfigDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oAuthConfigDo) Returning(value interface{}, columns ...string) *oAuthConfigDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oAuthConfigDo) Not(conds ...gen.Condition) *oAuthConfigDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oAuthConfigDo) Or(conds ...gen.Condition) *oAuthConfigDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oAuthConfigDo) Select(conds ...field.Expr) *oAuthConfigDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oAuthConfigDo) Where(conds ...gen.Condition) *oAuthConfigDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oAuthConfigDo) Order(conds ...field.Expr) *oAuthConfigDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oAuthConfigDo) Distinct(cols ...field.Expr) *oAuthConfigDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oAuthConfigDo) Omit(cols ...field.Expr) *oAuthConfigDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oAuthConfigDo) Join(table schema.Tabler, on ...field.Expr) *oAuthConfigDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oAuthConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *oAuthConfigDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oAuthConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *oAuthConfigDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oAuthConfigDo) Group(cols ...field.Expr) *oAuthConfigDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oAuthConfigDo) Having(conds ...gen.Condition) *oAuthConfigDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oAuthConfigDo) Limit(limit int) *oAuthConfigDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oAuthConfigDo) Offset(offset int) *oAuthConfigDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oAuthConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *oAuthConfigDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oAuthConfigDo) Unscoped() *oAuthConfigDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oAuthConfigDo) Create(values ...*model.OAuthConfig) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oAuthConfigDo) CreateInBatches(values []*model.OAuthConfig, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oAuthConfigDo) Save(values ...*model.OAuthConfig) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oAuthConfigDo) First() (*model.OAuthConfig, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OAuthConfig), nil
	}
}

func (o oAuthConfigDo) Take() (*model.OAuthConfig, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OAuthConfig), nil
	}
}

func (o oAuthConfigDo) Last() (*model.OAuthConfig, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OAuthConfig), nil
	}
}

func (o oAuthConfigDo) Find() ([]*model.OAuthConfig, error) {
	result, err := o.DO.Find()
	return result.([]*model.OAuthConfig), err
}

func (o oAuthConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OAuthConfig, err error) {
	buf := make([]*model.OAuthConfig, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oAuthConfigDo) FindInBatches(result *[]*model.OAuthConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oAuthConfigDo) Attrs(attrs ...field.AssignExpr) *oAuthConfigDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oAuthConfigDo) Assign(attrs ...field.AssignExpr) *oAuthConfigDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oAuthConfigDo) Joins(fields ...field.RelationField) *oAuthConfigDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oAuthConfigDo) Preload(fields ...field.RelationField) *oAuthConfigDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oAuthConfigDo) FirstOrInit() (*model.OAuthConfig, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OAuthConfig), nil
	}
}

func (o oAuthConfigDo) FirstOrCreate() (*model.OAuthConfig, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OAuthConfig), nil
	}
}

func (o oAuthConfigDo) FindByPage(offset int, limit int) (result []*model.OAuthConfig, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oAuthConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oAuthConfigDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oAuthConfigDo) Delete(models ...*model.OAuthConfig) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oAuthConfigDo) withDO(do gen.Dao) *oAuthConfigDo {
	o.DO = *do.(*gen.DO)
	return o
}

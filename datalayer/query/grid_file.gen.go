// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xmx/aegis-server/datalayer/model"
)

func newGridFile(db *gorm.DB, opts ...gen.DOOption) gridFile {
	_gridFile := gridFile{}

	_gridFile.gridFileDo.UseDB(db, opts...)
	_gridFile.gridFileDo.UseModel(&model.GridFile{})

	tableName := _gridFile.gridFileDo.TableName()
	_gridFile.ALL = field.NewAsterisk(tableName)
	_gridFile.ID = field.NewInt64(tableName, "id")
	_gridFile.Filename = field.NewString(tableName, "filename")
	_gridFile.Extension = field.NewString(tableName, "extension")
	_gridFile.MediaType = field.NewString(tableName, "media_type")
	_gridFile.Length = field.NewInt64(tableName, "length")
	_gridFile.Burst = field.NewUint16(tableName, "burst")
	_gridFile.MD5 = field.NewString(tableName, "md5")
	_gridFile.SHA1 = field.NewString(tableName, "sha1")
	_gridFile.SHA256 = field.NewString(tableName, "sha256")
	_gridFile.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gridFile.CreatedAt = field.NewTime(tableName, "created_at")

	_gridFile.fillFieldMap()

	return _gridFile
}

type gridFile struct {
	gridFileDo gridFileDo

	ALL       field.Asterisk
	ID        field.Int64
	Filename  field.String
	Extension field.String
	MediaType field.String
	Length    field.Int64
	Burst     field.Uint16
	MD5       field.String
	SHA1      field.String
	SHA256    field.String
	UpdatedAt field.Time
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (g gridFile) Table(newTableName string) *gridFile {
	g.gridFileDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gridFile) As(alias string) *gridFile {
	g.gridFileDo.DO = *(g.gridFileDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gridFile) updateTableName(table string) *gridFile {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Filename = field.NewString(table, "filename")
	g.Extension = field.NewString(table, "extension")
	g.MediaType = field.NewString(table, "media_type")
	g.Length = field.NewInt64(table, "length")
	g.Burst = field.NewUint16(table, "burst")
	g.MD5 = field.NewString(table, "md5")
	g.SHA1 = field.NewString(table, "sha1")
	g.SHA256 = field.NewString(table, "sha256")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.CreatedAt = field.NewTime(table, "created_at")

	g.fillFieldMap()

	return g
}

func (g *gridFile) WithContext(ctx context.Context) *gridFileDo { return g.gridFileDo.WithContext(ctx) }

func (g gridFile) TableName() string { return g.gridFileDo.TableName() }

func (g gridFile) Alias() string { return g.gridFileDo.Alias() }

func (g gridFile) Columns(cols ...field.Expr) gen.Columns { return g.gridFileDo.Columns(cols...) }

func (g *gridFile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gridFile) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 11)
	g.fieldMap["id"] = g.ID
	g.fieldMap["filename"] = g.Filename
	g.fieldMap["extension"] = g.Extension
	g.fieldMap["media_type"] = g.MediaType
	g.fieldMap["length"] = g.Length
	g.fieldMap["burst"] = g.Burst
	g.fieldMap["md5"] = g.MD5
	g.fieldMap["sha1"] = g.SHA1
	g.fieldMap["sha256"] = g.SHA256
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["created_at"] = g.CreatedAt
}

func (g gridFile) clone(db *gorm.DB) gridFile {
	g.gridFileDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gridFile) replaceDB(db *gorm.DB) gridFile {
	g.gridFileDo.ReplaceDB(db)
	return g
}

type gridFileDo struct{ gen.DO }

func (g gridFileDo) Debug() *gridFileDo {
	return g.withDO(g.DO.Debug())
}

func (g gridFileDo) WithContext(ctx context.Context) *gridFileDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gridFileDo) ReadDB() *gridFileDo {
	return g.Clauses(dbresolver.Read)
}

func (g gridFileDo) WriteDB() *gridFileDo {
	return g.Clauses(dbresolver.Write)
}

func (g gridFileDo) Session(config *gorm.Session) *gridFileDo {
	return g.withDO(g.DO.Session(config))
}

func (g gridFileDo) Clauses(conds ...clause.Expression) *gridFileDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gridFileDo) Returning(value interface{}, columns ...string) *gridFileDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gridFileDo) Not(conds ...gen.Condition) *gridFileDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gridFileDo) Or(conds ...gen.Condition) *gridFileDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gridFileDo) Select(conds ...field.Expr) *gridFileDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gridFileDo) Where(conds ...gen.Condition) *gridFileDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gridFileDo) Order(conds ...field.Expr) *gridFileDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gridFileDo) Distinct(cols ...field.Expr) *gridFileDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gridFileDo) Omit(cols ...field.Expr) *gridFileDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gridFileDo) Join(table schema.Tabler, on ...field.Expr) *gridFileDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gridFileDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gridFileDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gridFileDo) RightJoin(table schema.Tabler, on ...field.Expr) *gridFileDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gridFileDo) Group(cols ...field.Expr) *gridFileDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gridFileDo) Having(conds ...gen.Condition) *gridFileDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gridFileDo) Limit(limit int) *gridFileDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gridFileDo) Offset(offset int) *gridFileDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gridFileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gridFileDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gridFileDo) Unscoped() *gridFileDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gridFileDo) Create(values ...*model.GridFile) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gridFileDo) CreateInBatches(values []*model.GridFile, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gridFileDo) Save(values ...*model.GridFile) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gridFileDo) First() (*model.GridFile, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GridFile), nil
	}
}

func (g gridFileDo) Take() (*model.GridFile, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GridFile), nil
	}
}

func (g gridFileDo) Last() (*model.GridFile, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GridFile), nil
	}
}

func (g gridFileDo) Find() ([]*model.GridFile, error) {
	result, err := g.DO.Find()
	return result.([]*model.GridFile), err
}

func (g gridFileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GridFile, err error) {
	buf := make([]*model.GridFile, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gridFileDo) FindInBatches(result *[]*model.GridFile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gridFileDo) Attrs(attrs ...field.AssignExpr) *gridFileDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gridFileDo) Assign(attrs ...field.AssignExpr) *gridFileDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gridFileDo) Joins(fields ...field.RelationField) *gridFileDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gridFileDo) Preload(fields ...field.RelationField) *gridFileDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gridFileDo) FirstOrInit() (*model.GridFile, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GridFile), nil
	}
}

func (g gridFileDo) FirstOrCreate() (*model.GridFile, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GridFile), nil
	}
}

func (g gridFileDo) FindByPage(offset int, limit int) (result []*model.GridFile, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gridFileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gridFileDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gridFileDo) Delete(models ...*model.GridFile) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gridFileDo) withDO(do gen.Dao) *gridFileDo {
	g.DO = *do.(*gen.DO)
	return g
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xmx/aegis-server/datalayer/model"
)

func newConfigServer(db *gorm.DB, opts ...gen.DOOption) configServer {
	_configServer := configServer{}

	_configServer.configServerDo.UseDB(db, opts...)
	_configServer.configServerDo.UseModel(&model.ConfigServer{})

	tableName := _configServer.configServerDo.TableName()
	_configServer.ALL = field.NewAsterisk(tableName)
	_configServer.ID = field.NewInt64(tableName, "id")
	_configServer.Enabled = field.NewBool(tableName, "enabled")
	_configServer.Addr = field.NewString(tableName, "addr")
	_configServer.Static = field.NewString(tableName, "static")
	_configServer.UpdatedAt = field.NewTime(tableName, "updated_at")
	_configServer.CreatedAt = field.NewTime(tableName, "created_at")

	_configServer.fillFieldMap()

	return _configServer
}

type configServer struct {
	configServerDo configServerDo

	ALL       field.Asterisk
	ID        field.Int64
	Enabled   field.Bool
	Addr      field.String
	Static    field.String
	UpdatedAt field.Time
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (c configServer) Table(newTableName string) *configServer {
	c.configServerDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c configServer) As(alias string) *configServer {
	c.configServerDo.DO = *(c.configServerDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *configServer) updateTableName(table string) *configServer {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Enabled = field.NewBool(table, "enabled")
	c.Addr = field.NewString(table, "addr")
	c.Static = field.NewString(table, "static")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.CreatedAt = field.NewTime(table, "created_at")

	c.fillFieldMap()

	return c
}

func (c *configServer) WithContext(ctx context.Context) *configServerDo {
	return c.configServerDo.WithContext(ctx)
}

func (c configServer) TableName() string { return c.configServerDo.TableName() }

func (c configServer) Alias() string { return c.configServerDo.Alias() }

func (c configServer) Columns(cols ...field.Expr) gen.Columns {
	return c.configServerDo.Columns(cols...)
}

func (c *configServer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *configServer) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["enabled"] = c.Enabled
	c.fieldMap["addr"] = c.Addr
	c.fieldMap["static"] = c.Static
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["created_at"] = c.CreatedAt
}

func (c configServer) clone(db *gorm.DB) configServer {
	c.configServerDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c configServer) replaceDB(db *gorm.DB) configServer {
	c.configServerDo.ReplaceDB(db)
	return c
}

type configServerDo struct{ gen.DO }

func (c configServerDo) Debug() *configServerDo {
	return c.withDO(c.DO.Debug())
}

func (c configServerDo) WithContext(ctx context.Context) *configServerDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c configServerDo) ReadDB() *configServerDo {
	return c.Clauses(dbresolver.Read)
}

func (c configServerDo) WriteDB() *configServerDo {
	return c.Clauses(dbresolver.Write)
}

func (c configServerDo) Session(config *gorm.Session) *configServerDo {
	return c.withDO(c.DO.Session(config))
}

func (c configServerDo) Clauses(conds ...clause.Expression) *configServerDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c configServerDo) Returning(value interface{}, columns ...string) *configServerDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c configServerDo) Not(conds ...gen.Condition) *configServerDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c configServerDo) Or(conds ...gen.Condition) *configServerDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c configServerDo) Select(conds ...field.Expr) *configServerDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c configServerDo) Where(conds ...gen.Condition) *configServerDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c configServerDo) Order(conds ...field.Expr) *configServerDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c configServerDo) Distinct(cols ...field.Expr) *configServerDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c configServerDo) Omit(cols ...field.Expr) *configServerDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c configServerDo) Join(table schema.Tabler, on ...field.Expr) *configServerDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c configServerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *configServerDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c configServerDo) RightJoin(table schema.Tabler, on ...field.Expr) *configServerDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c configServerDo) Group(cols ...field.Expr) *configServerDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c configServerDo) Having(conds ...gen.Condition) *configServerDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c configServerDo) Limit(limit int) *configServerDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c configServerDo) Offset(offset int) *configServerDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c configServerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *configServerDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c configServerDo) Unscoped() *configServerDo {
	return c.withDO(c.DO.Unscoped())
}

func (c configServerDo) Create(values ...*model.ConfigServer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c configServerDo) CreateInBatches(values []*model.ConfigServer, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c configServerDo) Save(values ...*model.ConfigServer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c configServerDo) First() (*model.ConfigServer, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigServer), nil
	}
}

func (c configServerDo) Take() (*model.ConfigServer, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigServer), nil
	}
}

func (c configServerDo) Last() (*model.ConfigServer, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigServer), nil
	}
}

func (c configServerDo) Find() ([]*model.ConfigServer, error) {
	result, err := c.DO.Find()
	return result.([]*model.ConfigServer), err
}

func (c configServerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConfigServer, err error) {
	buf := make([]*model.ConfigServer, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c configServerDo) FindInBatches(result *[]*model.ConfigServer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c configServerDo) Attrs(attrs ...field.AssignExpr) *configServerDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c configServerDo) Assign(attrs ...field.AssignExpr) *configServerDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c configServerDo) Joins(fields ...field.RelationField) *configServerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c configServerDo) Preload(fields ...field.RelationField) *configServerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c configServerDo) FirstOrInit() (*model.ConfigServer, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigServer), nil
	}
}

func (c configServerDo) FirstOrCreate() (*model.ConfigServer, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigServer), nil
	}
}

func (c configServerDo) FindByPage(offset int, limit int) (result []*model.ConfigServer, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c configServerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c configServerDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c configServerDo) Delete(models ...*model.ConfigServer) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *configServerDo) withDO(do gen.Dao) *configServerDo {
	c.DO = *do.(*gen.DO)
	return c
}

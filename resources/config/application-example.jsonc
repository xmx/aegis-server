// 使用前请按照本文格式，创建一个 application.jsonc 的配置文件。

{
  // 类似于 springboot profile 配置，根据配置切换配置文件。
  // https://docs.spring.io/spring-boot/reference/features/profiles.html
  "active": "dev",
  "server": {
    // 服务监听地址，不填写则会随机监听一个端口（看启动日志）。
    "addr": "0.0.0.0:443",
    // ReadTimeout is the maximum duration for reading the entire
    // request, including the body. A zero or negative value means
    // there will be no timeout.
    //
    // Because ReadTimeout does not let Handlers make per-request
    // decisions on each request body's acceptable deadline or
    // upload rate, most users will prefer to use
    // ReadHeaderTimeout. It is valid to use them both.
    "read_timeout": "0s",
    // ReadHeaderTimeout is the amount of time allowed to read
    // request headers. The connection's read deadline is reset
    // after reading the headers and the Handler can decide what
    // is considered too slow for the body. If zero, the value of
    // ReadTimeout is used. If negative, or if zero and ReadTimeout
    // is zero or negative, there is no timeout.
    "read_header_timeout": "0s",
    // WriteTimeout is the maximum duration before timing out
    // writes of the response. It is reset whenever a new
    // request's header is read. Like ReadTimeout, it does not
    // let Handlers make decisions on a per-request basis.
    // A zero or negative value means there will be no timeout.
    "write_timeout": "0s",
    // IdleTimeout is the maximum amount of time to wait for the
    // next request when keep-alives are enabled. If zero, the value
    // of ReadTimeout is used. If negative, or if zero and ReadTimeout
    // is zero or negative, there is no timeout.
    "idle_timeout": "0s",
    // MaxHeaderBytes controls the maximum number of bytes the
    // server will read parsing the request header's keys and
    // values, including the request line. It does not limit the
    // size of the request body.
    // If zero, DefaultMaxHeaderBytes is used.
    "max_header_bytes": 0,
    // 静态资源路径，不填写则认为无需静态资源代理。
    "static": {
      "/": "resources/static/root/",
      "/oas3": "resources/static/oas3/",
      "/play": "resources/static/play/"
    }
  },
  // 数据库配置相关。
  "database": {
    // MongoDB 数据库连接。
    "uri": "mongodb+srv://<username>:<password>@mongo.example.com/<dbname>?retryWrites=true&w=majority&appName=dev"
  },
  // 日志配置。
  "logger": {
    // 日志输出级别，请参考：https://github.com/golang/go/blob/go1.23.2/src/log/slog/level.go#L67-L75
    "level": "DEBUG",
    // 是否将日志输出到控制台，生成环境应该关闭，开发测试环境建议打开。
    "console": true,
    // 日志输出文件，不填写代表不输出到文件。
    // https://github.com/natefinch/lumberjack/blob/v2.2.1/lumberjack.go#L80-L83
    "filename": "resources/log/application.jsonl",
    // https://github.com/natefinch/lumberjack/blob/v2.2.1/lumberjack.go#L85-L87
    "maxsize": 0,
    // https://github.com/natefinch/lumberjack/blob/v2.2.1/lumberjack.go#L89-L94
    "maxage": 0,
    // https://github.com/natefinch/lumberjack/blob/v2.2.1/lumberjack.go#L96-L99
    "maxbackups": 0,
    // https://github.com/natefinch/lumberjack/blob/v2.2.1/lumberjack.go#L101-L104
    "localtime": true,
    // https://github.com/natefinch/lumberjack/blob/v2.2.1/lumberjack.go#L106-L108
    "compress": true
  }
}
